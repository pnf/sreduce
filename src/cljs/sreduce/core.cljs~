(ns sreduce.core
  (:require-macros [cljs.core.async.macros :as m :refer [go go-loop]])
  (:require [reagent.core :as r :refer [atom]]
            [reagent.session :as session]
            [timothypratley.reanimated.core :as anim]
            [secretary.core :as secretary :include-macros true]
            [accountant.core :as accountant]
            [cljs.core.async :as async :refer [<! >! timeout chan promise-chan pipe onto-chan]]))


(defonce timer (r/atom (js/Date.)))
(defonce timer2  (r/atom (js/Date.)))

(defonce time-color (r/atom "#f34"))

(defonce time-chan (chan (async/dropping-buffer 1)))

(defonce time-updater (js/setInterval
                       #(do
                          (go (>! time-chan (js/Date.)))
                          (reset! timer (js/Date.)))
                       100))

(defonce time-receiver (go-loop []
                         (reset! timer2 (<! time-chan))
                         (recur)
                         ))

(defn clock []
  (let [time-str  (-> @timer .toTimeString (clojure.string/split " ") first)
        time-str2 (-> @timer2 .toTimeString (clojure.string/split " ") first)
        time-str (str time-str "---" time-str2)]
    [:div.example-clock
     {:style {:color @time-color}}
     time-str]))

(defn delay-spool [as t]
  (let [c (chan)]
    (go-loop [[a & as] as]
      (if a
        (do a
            (>! c a)
            (<! (timeout (rand-int t)))
            (recur as))
        (async/close! c)))
    c))

(defn launch-reductions [c-redn f l ps]
  (let [pairs (take-while (fn [[a b]] (and a b))
                          (partition 2 (map deref ps)))]
    (map (fn [[a b]]
           (let [v (volatile! nil)]
             (go (>! c-redn [(inc l) (<! (f a b)) v]))
             v)) pairs)))

(defn wrapv [c] (pipe c (chan 1 (map (fn [x] [0 x nil])))))

(defn pretty-state [{:keys [peers np]}]
  (let [peers (->> (seq peers)
                   (sort-by first)
                   (filter second)
                   (map (fn [[l ps]]
                          (let [psd  (map deref ps)]
                            [l (take-while identity (take 2 psd)) (count psd) (count (filter not psd))]))))]
    [np peers]))

(defn assoc-reduce3 [f c-in & {:keys [np-max debug] :or {np-max 10 debug false}}]
  (let [c-result (promise-chan)
        c-redn    (chan np-max)]
    (go-loop [{:keys [c-in peers np] :as state} {:c-in (wrapv c-in) :peers {} :np 0}]
      (if debug (>! debug (pretty-state state)))
      (if-let [cs (seq (filter identity (list (if (pos? np) c-redn) c-in)))]
        (let [[[l res v]  c]  (alts! cs)]
          (if-not l
            (recur (assoc state :c-in nil))
            (let [ps        (if v
                              (do (vreset! v res) (peers l))
                              (concat (peers 0) [(volatile! res)]))
                  vs        (launch-reductions c-redn f l ps)
                  ps        (drop (* (count vs) 2) ps )
                  np        (cond-> (+ np (count vs)) (pos? l) dec)
                  l2        (inc l)
                  ps2       (concat (peers l2) vs)]
              (recur (assoc state :np np :peers (assoc peers l ps l2 ps2))))))
        (let [reds (->> (seq peers)
                        (sort-by first)
                        (map second)
                        (map first)
                        (filter identity)
                        (map deref)
                        reverse
                        )]
          (if debug (prn "Reducing reductions" reds))
          (if (<= (count reds) 1)
            (>! c-result (first reds))
            (let [c-in (wrapv (chan))]
              (onto-chan c-in reds)
              (recur {:c-in c-in :peers {} :np 0}))))))
    c-result))


;; -------------------------
;; Views

(defn home-page []
  [:div [:h2 "Welcome to sreduce"]
   [:div [:a {:href "/about"} "go to about page"]]])

(defn about-page []
  [:div [:h2 "About sreduce"]
   [:div
    [clock]
    [:a {:href "/"} "go to the home page"]]
   [:div [:h3 "Yipeex"  "foo"]
    [:div
     ;[:button {:on-click (anim/toggle-handler show?)} "Pop!"]
     [:div
      {:style {:background-color "yellow"}}
      [:p "Here is a circle."]
      [:svg (doall  (for [i (range 10)]
                      (let [y (+ 50 (* 15 i))
                            w (mod (+ (* 5 i) (.getTime @timer)) 50)]
                        [:rect {:key i :height 10 :width w :x 10 :y y :fill "green"}])))]]]]
   ])

(defn current-page []
  [:div [(session/get :current-page)]])

;; -------------------------
;; Routes

(secretary/defroute "/" []
  (session/put! :current-page #'home-page))

(secretary/defroute "/about" []
  (session/put! :current-page #'about-page))

;; -------------------------
;; Initialize app

(defn mount-root []
  (r/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (secretary/dispatch! path))
     :path-exists?
     (fn [path]
       (secretary/locate-route path))})
  (accountant/dispatch-current!)
  (mount-root))
